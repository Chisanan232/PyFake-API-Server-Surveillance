#################################################################################################################################
#
# Workflow Description:
#     Use Poetry to run testing by specific type with all test items via PyTest and generate its testing
#     coverage report (it would save reports by 'actions/upload-artifact').
#
# Workflow input parameters:
#     * runtime_os: The OS to use for runtime environment. In default, it's 'ubuntu-latest'.
#     * python_version: The Python version to run the workflow. In default, it's Python version '3.11'.
#     * test_type: The testing type. In generally, it only has 2 options: 'unit-test' and 'integration-test'.
#     * install_dependency_with_group: Install the dependency by Poetry configuration with dependency group setting. This parameter receive the dependency group naming.
#     * all_test_items_paths: The target paths of test items under test.
#     * keep_run_if_test_fail: Keep running CI process if it gets failure at running runs.
#
# Workflow running output:
#     No, but it would save the testing coverage reports to provide after-process to organize and record.
#
#     * Upload-Artifact:
#         * coverage: The test coverage report which be generated by PyTest, and it's recorded after run test done.
#                           The file name format would be .coverage.<test type>.<runtime os>-<python-version>
#
#################################################################################################################################

name: Run test items via PyTest

# TODO: Run Python package test via Poetry.

on:
  workflow_call:
    inputs:
      runtime_os:
        description: "The OS to use for runtime environment. In default, it's 'ubuntu-latest'."
        required: false
        type: string
        default: ubuntu-latest
      python_version:
        description: "The Python version to run the workflow. In default, it's Python version '3.11'."
        required: false
        type: string
        default: 3.11
      test_type:
        description: "The testing type. In generally, it only has 2 options: 'unit-test' and 'integration-test'."
        required: true
        type: string
      install_dependency_with_group:
        description: "Install the dependency by Poetry configuration with dependency group setting. This parameter receive the dependency group naming."
        type: string
        required: false
        default: ''
      all_test_items_paths:
        description: "The target paths of test items under test."
        required: true
        type: string
      keep_run_if_test_fail:
        description: "Keep running CI process if it gets failure at running runs."
        type: boolean
        required: false
        default: false

# TODO: Add a reusable workflow about running test via Poetry
# TODO: https://github.com/marketplace/actions/python-poetry-action

env:
  PIP_DISABLE_PIP_VERSION_CHECK: 1

jobs:
  run_test_items:
    runs-on: ${{ inputs.runtime_os }}

    strategy:
      matrix:
        test-path: ${{fromJson(inputs.all_test_items_paths)}}

    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ github.head_ref }}

      - name: Install Python ${{ inputs.python_version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ inputs.python_version }}

      - name: Install Python dependencies
        run: |
          pip --version
          pip install -U poetry

      - name: Build Python runtime environment by Poetry
        run: |
          poetry --version
          poetry install

      - name: Run tests with pytest
        run: poetry run pytest ${{ matrix.test-path }}
        continue-on-error: ${{ inputs.keep_run_if_test_fail }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Rename the code coverage result file
        run: |
          mv ./.coverage ./.coverage.${{ inputs.test_type }}.${{ inputs.runtime_os }}-${{ inputs.python_version }}

      - name: Upload code coverage result file
        uses: actions/upload-artifact@v4
        with:
          name: coverage_${{ inputs.test_type }}_${{ inputs.runtime_os }}_${{ inputs.python_version }}
          path: .coverage.${{ inputs.test_type }}.${{ inputs.runtime_os }}-${{ inputs.python_version }}
          if-no-files-found: error
          include-hidden-files: true
