name: "Monitor API server"
description: "Monitor the target API server and sync the latest version with the fake server if it has any change."
author: "Bryant Liu"
inputs:
  # API server info
  repo:
    description: "The target project repository to monitor."
    required: true
  api-doc-url:
    description: "The host URL of API documentation to monitor."
    required: true
#  server-type:
#    description: "The API server type PyFake-API-Server would try to check. [options: <rest-server>]"
#    required: true
  # git info
  git-author-name:
    description: "The author info (only name) to commit the change of API interface if it has."
    required: false
    default: "PyFake-API-Server-bot"
  git-author-email:
    description: "The author info (only email) to commit the change of API interface if it has."
    required: false
    default: ""
  git-commit-msg:
    description: "The commit message for committing the change of API interface if it has."
    required: false
    default: "✏️ Update the API interface settings."
  # options about how to pull API server doc config
  config-path:
    description: "The file path of the PyFake-API-Server configuration."
    required: false
    default: "./api.yaml"
  include-template-config:
    description: "Whether it should include template section in configuration or not."
    required: false
    default: "true"
  base-file-path:
    description: "The base path which should be a directory and includes all configuration."
    required: false
    default: "./"
  base-url:
    description: "The base URL as prefix at API path in configuration."
    required: false
  divide-api:
    description: "Divide the API part configuration."
    required: false
    default: "false"
  divide-http:
    description: "Divide the HTTP part configuration."
    required: false
    default: "false"
  divide-http-request:
    description: "Divide the HTTP request part configuration."
    required: false
    default: "false"
  divide-http-response:
    description: "Divide the HTTP response part configuration."
    required: false
    default: "false"
  dry-run:
    description: "Dry run this action. It just won't download the configuration finally."
    required: false
    default: "false"
outputs:
  monitor-result:
    description: "If it has any change, this property value would be *true*."
    value: ${{ steps.monitor-result.outputs.monitor-result }}
runs:
  using: "composite"
  steps:
    - name: Fail-fast in unsupported environments
      if: runner.os == 'Windows'
      shell: bash -eEuo pipefail {0}
      run: |
        >&2 echo This action is only able to run under GNU/Linux or Apple MacOS environments
        exit 1

    - name: Clone project
      uses: actions/checkout@v4

    - name: Install Python 3.12 for running surveillance
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Python dependencies
      shell: bash
      run: |
        pip --version
        pip install -U poetry

    - name: Build Python runtime environment by Poetry
      shell: bash
      run: |
        poetry --version
        poetry install

    - name: Run surveillance
      run: poetry run run-fake-server-surveillance
#      run: poetry run fake rest-server run-surveillance
      shell: bash
      env:
        # API documentation info
        API_DOC_URL: ${{ inputs.api-doc-url }}
#        SERVER_TYPE: ${{ inputs.server-type }}
        # git info
        GIT_REPOSITORY: ${{ inputs.repo }}
        GIT_AUTHOR_NAME: ${{ inputs.git-author-name }}
        GIT_AUTHOR_EMAIL: ${{ inputs.git-author-email }}
        GIT_COMMIT_MSG: ${{ inputs.git-commit-msg }}
        # for subcommand line *pull* options
        CONFIG_PATH: ${{ inputs.config-path }}
        INCLUDE_TEMPLATE_CONFIG: ${{ inputs.include-template-config }}
        BASE_FILE_PATH: ${{ inputs.base-file-path }}
        BASE_URL: ${{ inputs.base-url }}
        DIVIDE_API: ${{ inputs.divide-api }}
        DIVIDE_HTTP: ${{ inputs.divide-http }}
        DIVIDE_HTTP_REQUEST: ${{ inputs.divide-http-request }}
        DIVIDE_HTTP_RESPONSE: ${{ inputs.divide-http-response }}
        DRY_RUN: ${{ inputs.dry-run }}

    - name: Set result as output value
      id: monitor-result
      shell: bash
      run: echo "monitor-result=$(echo $TODO_SOMETHING_OUTPUT)" >> $GITHUB_OUTPUT
branding:
  icon: 'monitor'
  color: 'black'
